id UserId {
    _ : uid
    company: long
}

mixin PublicProfile {
    name    : str
    email   : str 
    phone   : str
}

mixin ProtectedProfile {
    password : str
}

data UserData {
    + PublicProfile
    + ProtectedProfile
}

data UserProfile {
    + PublicProfile
    + ProtectedProfile
    id : UserId
}

data CreateUserRequest {
    + ProtectedProfile
    + PublicProfile
}

data QueryingResponse {
    total: int
    entries: list[UserProfile]
    offsetLimit: OffsetLimit
}

// only for administrative purpose
service UserProfileService {
    def register(profile: CreateUserRequest)                         : UserProfile       !! DomainFailure
    def updatePublicInfo(id: UserId, publicData: PublicProfile)      : UserProfile       !! DomainFailure
    def remove(id: UserId)                                           : SuccessResponse   !! DomainFailure
    def retrieveUsers(limitOffset: OffsetLimit, ordering: opt[Ord])  : QueryingResponse  !! DomainFailure  
}